<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CatalyzeObject.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CatalyzeObject</TokenIdentifier>
			<Abstract type="html">CatalyzeObject is the base class of CatalyzeUser.  It is also the base class for custom
classes on the catalyze.io API.  A CatalyzeObject is initialized with the name of the custom
class it is associated with and is the container for an Entry in that class.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/objectWithClassName:</TokenIdentifier>
			<Abstract type="html">Initializes a CatalyzeObject with a class name.  This class name is used to lookup
URL routes.  Valid class names are those which are named after a custom class on the
catalyze.io API.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (CatalyzeObject *)objectWithClassName:(NSString *)className</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">a valid class name representing the type of CatalyzeObject being created</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a newly created CatalyzeObject with the given class name</Abstract></ReturnValue>
			<Anchor>//api/name/objectWithClassName:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/objectWithClassName:dictionary:</TokenIdentifier>
			<Abstract type="html">Initializes a CatalyzeObject with a class name.  This class name is used to lookup
URL routes.  Valid class names are those which are named after a custom class on the
catalyze.io API. The dictionary may contain any key value pairs, such as predefined
fields like firstname, lastname or custom fields.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (CatalyzeObject *)objectWithClassName:(NSString *)className dictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">a valid class name representing the type of CatalyzeObject being created</Abstract>
				</Parameter><Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">key value pairs to be stored with the CatalyzeObject on the next network request.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a newly created CatalyzeObject with the given class name and key value pairs stored from the dictionary</Abstract></ReturnValue>
			<Anchor>//api/name/objectWithClassName:dictionary:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/initWithClassName:</TokenIdentifier>
			<Abstract type="html">Constructs a new instance of CatalzeObject with the given class name.  See [CatalyzeObject objectWithClassName:]</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (id)initWithClassName:(NSString *)newClassName</Declaration>
			<Parameters>
				<Parameter>
					<Name>newClassName</Name>
					<Abstract type="html">a valid class name representing the type of CatalyzeObject being created</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the newly created instance of CatalyzeObject</Abstract></ReturnValue>
			<Anchor>//api/name/initWithClassName:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/setCatalyzeClassName:</TokenIdentifier>
			<Abstract type="html">A string representation of the type of CatalyzeObject being created.  Valid
class names are documented in CatalyzeConstants.  This is for **internal
use only**. Developers should not change this class name or set this class
name directly.  This will result in thrown exceptions upon the next network request.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *catalyzeClassName</Declaration>
			
			
			<Anchor>//api/name/catalyzeClassName</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/catalyzeClassName</TokenIdentifier>
			<Abstract type="html">A string representation of the type of CatalyzeObject being created.  Valid
class names are documented in CatalyzeConstants.  This is for **internal
use only**. Developers should not change this class name or set this class
name directly.  This will result in thrown exceptions upon the next network request.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *catalyzeClassName</Declaration>
			
			
			<Anchor>//api/name/catalyzeClassName</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CatalyzeObject/catalyzeClassName</TokenIdentifier>
			<Abstract type="html">A string representation of the type of CatalyzeObject being created.  Valid
class names are documented in CatalyzeConstants.  This is for **internal
use only**. Developers should not change this class name or set this class
name directly.  This will result in thrown exceptions upon the next network request.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *catalyzeClassName</Declaration>
			
			
			<Anchor>//api/name/catalyzeClassName</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/setObjectId:</TokenIdentifier>
			<Abstract type="html">The unique identifier of this CatalyzeObject.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *objectId</Declaration>
			
			
			<Anchor>//api/name/objectId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/objectId</TokenIdentifier>
			<Abstract type="html">The unique identifier of this CatalyzeObject.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *objectId</Declaration>
			
			
			<Anchor>//api/name/objectId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CatalyzeObject/objectId</TokenIdentifier>
			<Abstract type="html">The unique identifier of this CatalyzeObject.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *objectId</Declaration>
			
			
			<Anchor>//api/name/objectId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/allKeys</TokenIdentifier>
			<Abstract type="html">This method returns an array of all of the keys set in this CatalyzeObject.  For example
if the child class of this CatalyzeObject is a CatalyzeUser it may return an array
containing the keys @[@&quot;firstName&quot;,@&quot;lastName&quot;, and @&quot;userId&quot;]. Useful
for iterating through all the elements on this CatalyzeObject and displaying their
values to the user.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (NSArray *)allKeys</Declaration>
			
			<ReturnValue><Abstract type="html">the array of keys stored in the objectDict</Abstract></ReturnValue>
			<Anchor>//api/name/allKeys</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/objectForKey:</TokenIdentifier>
			<Abstract type="html">the key to look for in objectDict</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (id)objectForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">the key to look for in objectDict</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the object in the objectDict stored with the given key</Abstract></ReturnValue>
			<Anchor>//api/name/objectForKey:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/setObject:forKey:</TokenIdentifier>
			<Abstract type="html">If an object is previously stored with this key, the old object will be overwritten</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)setObject:(id)object forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">the object to save in objectDict such as @&quot;John&quot;</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">the key to store the given object under in the objectDict such as @&quot;firstName&quot;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKey:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/removeObjectForKey:</TokenIdentifier>
			<Abstract type="html">the location of the object to be removed from the objectDict</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)removeObjectForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">the location of the object to be removed from the objectDict</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeObjectForKey:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/valueForKey:</TokenIdentifier>
			<Abstract type="html">This method functions exactly the same as objectForKey:</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (id)valueForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">the location to look for an object to return in objectDict</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the object stored in objectDict with the specified key, or nil if one does not exist</Abstract></ReturnValue>
			<Anchor>//api/name/valueForKey:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/setValue:forKey:</TokenIdentifier>
			<Abstract type="html">This method functions exactly the same as setObject:forKey:</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)setValue:(id)value forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">the value to save in objectDict such as @&quot;John&quot;</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">the key to store the given value under in the objectDict such as @&quot;firstName&quot;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setValue:forKey:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/removeValueForKey:</TokenIdentifier>
			<Abstract type="html">This method functions exactly the same as removeObjectForKey:</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)removeValueForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">the location of the object to be removed from the objectDict</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeValueForKey:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/createInBackground</TokenIdentifier>
			<Abstract type="html">Creates a new CatalyzeObject on the catalyze.io API.  If this is the parent class of a
CatalyzeUser, this method should never be called.  This method creates a new custom class entry
on the catalyze.io API. This method offers no indication as to when the request is completed.
If this is necessary, see createInBackgroundWithBlock:</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)createInBackground</Declaration>
			
			
			<Anchor>//api/name/createInBackground</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/createInBackgroundWithBlock:</TokenIdentifier>
			<Abstract type="html">Creates a new custom class entry on the catalyze.io API.  Upon the request&apos;s
completion, this CatalyzeObject will have all fields updated and save which
can be retrieved by calling objectForKey:. Upon request completion, the
CatalyzeBooleanResultBlock is executed whether the request succeeded or failed.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)createInBackgroundWithBlock:(CatalyzeBooleanResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">the completion block to be executed upon the request&apos;s completion.
See CatalyzeBooleanResultBlock to tell whether or not the request was successful.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createInBackgroundWithBlock:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/createInBackgroundWithTarget:selector:</TokenIdentifier>
			<Abstract type="html">Creates a new custom class entry on the catalyze.io API.  Upon the request&apos;s
completion, this CatalyzeObject will have all fields updated and save which
can be retrieved by calling objectForKey:. The object sent with the selector
will be the error of the request or nil of the request was successful.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)createInBackgroundWithTarget:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to perform the given selector on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to be performed on the given target on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createInBackgroundWithTarget:selector:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/saveInBackground</TokenIdentifier>
			<Abstract type="html">Saves this CatalyzeObject in the background.  Only dirty fields are sent to the
catalyze.io API and saved.  This method offers no indication as to whether or not
the request completed, succeeded, or failed.  If this is neccessary, see
saveInBackgroundWithBlock:.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)saveInBackground</Declaration>
			
			
			<Anchor>//api/name/saveInBackground</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/saveInBackgroundWithBlock:</TokenIdentifier>
			<Abstract type="html">Saves this CatalyzeObject in the background.  Only dirty fields are sent to the
catalyze.io API and saved.  Upon completion of the request, the CatalyzeBooleanResultBlock
is executed whether the request succeeded or failed.  To tell if the request succeeded
or not, see CatalyzeBooleanResultBlock</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)saveInBackgroundWithBlock:(CatalyzeBooleanResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">the completion block to be executed upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveInBackgroundWithBlock:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/saveInBackgroundWithTarget:selector:</TokenIdentifier>
			<Abstract type="html">Saves this CatalyzeObject in the background.  Only dirty fields are sent to the
catalyze.io API and saved.  Upon completion of the request, the given selector
will be performed on the given target.  The object sent with the selector is the
error of the request, or nil if the request was successful.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)saveInBackgroundWithTarget:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to perform the given selector on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to be performed on the given target on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveInBackgroundWithTarget:selector:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/saveAllInBackground:</TokenIdentifier>
			<Abstract type="html">Executes saveInBackground on each of the objects passed in with no indication
of whether the request completed, succeeded or failed.  If this is necessary see
saveAllInBackground:block:. These requests are executed in sequence and not in
separate background tasks.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (void)saveAllInBackground:(NSArray *)objects</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">the array of objects to be saved to the catalyze.io API</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveAllInBackground:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/saveAllInBackground:block:</TokenIdentifier>
			<Abstract type="html">Executes saveInBackgroundWithBlock: on each of the objects passed in.  These requests are
executed in sequence and not in separate background tasks. The CatalyzeBooleanResultBlock
is executed upon completion of the request whether it succeeded or failed, or failed
on any of the intermediary objects in the array.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (void)saveAllInBackground:(NSArray *)objects block:(CatalyzeBooleanResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">the array of objects to be saved to the catalyze.io API</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">the completion block to be executed upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveAllInBackground:block:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/saveAllInBackground:target:selector:</TokenIdentifier>
			<Abstract type="html">Executes saveInBackgroundWithBlock: on each of the objects passed in.  These requests are
executed in sequence and not in separate background tasks. The given selector
is performed on the given target upon the request&apos;s completion whether is succeeded,
failed, or failed on any of the intermediary objects in the array.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (void)saveAllInBackground:(NSArray *)objects target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">the array of objects to be saved to the catalyze.io API</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to perform the given selector on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to be performed on the given target on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveAllInBackground:target:selector:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/retrieveInBackground</TokenIdentifier>
			<Abstract type="html">Retrieves this CatalyzeObject in the background.  Mostly used for objects that have
an id but no data.  This method offers no indication as to whether or not the request
completed, succeeded, or failed. If this is necessary see retriveInBackgroundWithBlock:.
Upon completion, this CatalyzeObject will have its objectDict updated with all of the
keys received from the catalyze.io API.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)retrieveInBackground</Declaration>
			
			
			<Anchor>//api/name/retrieveInBackground</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/retrieveInBackgroundWithBlock:</TokenIdentifier>
			<Abstract type="html">Retrieves this CatalyzeObject in the background.  Mostly used for objects that have
an id but no data.  Upon completion of the request the CatalyzeObjectResultBlock will
be executed whether or not the request completed, succeeded, or failed.  Upon completion,
this CatalyzeObject will have its objectDict updated with all of the keys received
from the catalyze.io API and this CatalyzeObject is sent back in the completion block as well.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)retrieveInBackgroundWithBlock:(CatalyzeObjectResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">the completion block to be executed upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveInBackgroundWithBlock:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/retrieveInBackgroundWithTarget:selector:</TokenIdentifier>
			<Abstract type="html">Retrieves this CatalyzeObject in the background.  Mostly used for objects that have
an id but no data.  Upon completion of the request the given selector will be performed
on the target whether or not the request completed, succeeded, or failed.  Upon
completion, this CatalyzeObject will have its objectDict updated with all of the keys
received from the catalyze.io API and this CatalyzeObject is sent back as the object
of the selector.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)retrieveInBackgroundWithTarget:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to perform the given selector on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to be performed on the given target on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveInBackgroundWithTarget:selector:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/retrieveAllInBackground:</TokenIdentifier>
			<Abstract type="html">Executes retrieveInBackground on each of the objects passed in with no indication
of whether the request completed, succeeded or failed.  If this is necessary see
retrieveAllInBackground:block:. These requests are executed in sequence and not in
separate background tasks.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (void)retrieveAllInBackground:(NSArray *)objects</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">the array of objects to be retrieved from the catalyze.io API</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveAllInBackground:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/retrieveAllInBackground:block:</TokenIdentifier>
			<Abstract type="html">Executes retrieveInBackgroundWithBlock: on each of the objects passed in.  These requests are
executed in sequence and not in separate background tasks. The CatalyzeBooleanResultBlock
is executed upon completion of the request whether it succeeded or failed, or failed
on any of the intermediary objects in the array.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (void)retrieveAllInBackground:(NSArray *)objects block:(CatalyzeBooleanResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">the array of objects to be retrieved from the catalyze.io API</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">the completion block to be executed upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveAllInBackground:block:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeObject/retrieveAllInBackground:target:selector:</TokenIdentifier>
			<Abstract type="html">Executes retrieveInBackgroundWithBlock: on each of the objects passed in.  These requests are
executed in sequence and not in separate background tasks. The given selector
is performed on the given target upon the request&apos;s completion whether is succeeded,
failed, or failed on any of the intermediary objects in the array.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>+ (void)retrieveAllInBackground:(NSArray *)objects target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">the array of objects to be retrieved from the catalyze.io API</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to perform the given selector on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to be performed on the given target on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveAllInBackground:target:selector:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/deleteInBackground</TokenIdentifier>
			<Abstract type="html">Deletes this CatalyzeObject in the background from the catalyze.io API.  This
method offers no indication as to whether or not the request completed,
succeeded, or failed. If this is necessary see deleteInBackgroundWithBlock:.
Upon completion, this CatalyzeObject will have nothing stored in its objectDict
and should be discarded and set to nil.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)deleteInBackground</Declaration>
			
			
			<Anchor>//api/name/deleteInBackground</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/deleteInBackgroundWithBlock:</TokenIdentifier>
			<Abstract type="html">Deletes this CatalyzeObject in the background.  Upon completion of the request
the CatalyzeObjectResultBlock will be executed whether or not the request
completed, succeeded, or failed.  Upon completion, this CatalyzeObject
will have nothing stored in its objectDict and should be discarded and set to nil.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)deleteInBackgroundWithBlock:(CatalyzeBooleanResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">the completion block to be executed upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteInBackgroundWithBlock:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeObject/deleteInBackgroundWithTarget:selector:</TokenIdentifier>
			<Abstract type="html">Deletes this CatalyzeObject in the background.  Upon completion of the request
the given selector will be performed on the target whether or not the request
completed, succeeded, or failed.  Upon completion, this CatalyzeObject
will have nothing stored in its objectDict and should be discarded and set to nil.</Abstract>
			<DeclaredIn>CatalyzeObject.h</DeclaredIn>
			
			<Declaration>- (void)deleteInBackgroundWithTarget:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to perform the given selector on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to be performed on the given target on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteInBackgroundWithTarget:selector:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
	</File>
</Tokens>