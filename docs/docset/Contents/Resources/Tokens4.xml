<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CatalyzeQuery.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CatalyzeQuery</TokenIdentifier>
			<Abstract type="html">A CatalyzeQuery is a developers tool for searching a custom class.  CatalyzeQuery&apos;s are initialized
with a class name which corresponds to a pre-defined custom class on the cataluze.io API.
CatalyzeQuerys are used to search a single field to match a single value.  These are specified
by queryField and queryValue.  Paging is also included with pageNumber and pageSize.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
            
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeQuery/queryWithClassName:</TokenIdentifier>
			<Abstract type="html">Initializes a CatalyzeQuery object with the given class name.  This class name is used
for URLs dealing with the custom class.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>+ (CatalyzeQuery *)queryWithClassName:(NSString *)className</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">the name of the custom class on the catalyze.io API being queried.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/queryWithClassName:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/initWithClassName:</TokenIdentifier>
			<Abstract type="html">Initializes a CatalyzeQuery object with the given class name.  This class name is used
for URLs dealing with the custom class.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>- (id)initWithClassName:(NSString *)newClassName</Declaration>
			<Parameters>
				<Parameter>
					<Name>newClassName</Name>
					<Abstract type="html">the name of the custom class on the catalyze.io API being queried.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithClassName:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/setCatalyzeClassName:</TokenIdentifier>
			<Abstract type="html">The name of the custom class that this query is searching.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *catalyzeClassName</Declaration>
			
			
			<Anchor>//api/name/catalyzeClassName</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/catalyzeClassName</TokenIdentifier>
			<Abstract type="html">The name of the custom class that this query is searching.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *catalyzeClassName</Declaration>
			
			
			<Anchor>//api/name/catalyzeClassName</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CatalyzeQuery/catalyzeClassName</TokenIdentifier>
			<Abstract type="html">The name of the custom class that this query is searching.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *catalyzeClassName</Declaration>
			
			
			<Anchor>//api/name/catalyzeClassName</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/setQueryField:</TokenIdentifier>
			<Abstract type="html">The name of the column to search in.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *queryField</Declaration>
			
			
			<Anchor>//api/name/queryField</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/queryField</TokenIdentifier>
			<Abstract type="html">The name of the column to search in.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *queryField</Declaration>
			
			
			<Anchor>//api/name/queryField</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CatalyzeQuery/queryField</TokenIdentifier>
			<Abstract type="html">The name of the column to search in.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *queryField</Declaration>
			
			
			<Anchor>//api/name/queryField</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/setQueryValue:</TokenIdentifier>
			<Abstract type="html">The value to look for in the column queryField.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) id queryValue</Declaration>
			
			
			<Anchor>//api/name/queryValue</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/queryValue</TokenIdentifier>
			<Abstract type="html">The value to look for in the column queryField.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) id queryValue</Declaration>
			
			
			<Anchor>//api/name/queryValue</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CatalyzeQuery/queryValue</TokenIdentifier>
			<Abstract type="html">The value to look for in the column queryField.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) id queryValue</Declaration>
			
			
			<Anchor>//api/name/queryValue</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/setPageNumber:</TokenIdentifier>
			<Abstract type="html">The page number to get results from.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property int pageNumber</Declaration>
			
			
			<Anchor>//api/name/pageNumber</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/pageNumber</TokenIdentifier>
			<Abstract type="html">The page number to get results from.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property int pageNumber</Declaration>
			
			
			<Anchor>//api/name/pageNumber</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CatalyzeQuery/pageNumber</TokenIdentifier>
			<Abstract type="html">The page number to get results from.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property int pageNumber</Declaration>
			
			
			<Anchor>//api/name/pageNumber</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/setPageSize:</TokenIdentifier>
			<Abstract type="html">The size of the pages to retrieve results from.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property int pageSize</Declaration>
			
			
			<Anchor>//api/name/pageSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/pageSize</TokenIdentifier>
			<Abstract type="html">The size of the pages to retrieve results from.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property int pageSize</Declaration>
			
			
			<Anchor>//api/name/pageSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CatalyzeQuery/pageSize</TokenIdentifier>
			<Abstract type="html">The size of the pages to retrieve results from.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>@property int pageSize</Declaration>
			
			
			<Anchor>//api/name/pageSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/retrieveInBackgroundWithBlock:</TokenIdentifier>
			<Abstract type="html">Performs the query asynchronously.  This should only be called after setting at minimum, the
queryField and queryValue.  Upon completion of the request, the CatalyzeArrayResultBlock is
performed with the results of the query.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>- (void)retrieveInBackgroundWithBlock:(CatalyzeArrayResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">the completion block to be executed upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveInBackgroundWithBlock:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeQuery/retrieveInBackgroundWithTarget:selector:</TokenIdentifier>
			<Abstract type="html">Performs the query asynchronously.  This should only be called after setting at minimum, the
queryField and queryValue.  Upon completion of the request, the given selector will be
performed on the given target with the array of results as the object of the selector.</Abstract>
			<DeclaredIn>CatalyzeQuery.h</DeclaredIn>
			
			<Declaration>- (void)retrieveInBackgroundWithTarget:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to perform the given selector on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to be performed on the given target on the Main Thread
upon the request&apos;s completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveInBackgroundWithTarget:selector:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
        
	</File>
</Tokens>